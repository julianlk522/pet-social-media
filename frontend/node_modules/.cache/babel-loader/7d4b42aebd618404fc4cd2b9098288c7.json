{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport postsService from \"./postsService\";\nconst initialState = {\n  postsArray: [],\n  isError: false,\n  isSuccess: false,\n  isLoading: false,\n  message: ''\n};\nexport const getPosts = createAsyncThunk('posts/getPosts', async (_, thunkAPI) => {\n  try {\n    return await postsService.getPosts();\n  } catch (error) {\n    const message = error.response && error.response.data && error.resonse.data.message || error.message || error.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n});\nexport const createPost = createAsyncThunk('posts/createPost', async (newPost, thunkAPI) => {\n  try {\n    return await postsService.createPost(newPost);\n  } catch (error) {\n    const message = error.response && error.response.data && error.resonse.data.message || error.message || error.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n});\nexport const updatePost = createAsyncThunk('posts/updatePost', async (_ref, thunkAPI) => {\n  let {\n    currentPostId: postId,\n    postData: updatedPost\n  } = _ref;\n\n  try {\n    return await postsService.updatePost(postId, updatedPost);\n  } catch (error) {\n    const message = error.response && error.response.data && error.resonse.data.message || error.message || error.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n});\nexport const likePost = createAsyncThunk('posts/likePost', async (postId, thunkAPI) => {\n  try {\n    return await postsService.likePost(postId);\n  } catch (error) {\n    const message = error.response && error.response.data && error.resonse.data.message || error.message || error.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n});\nexport const deletePost = createAsyncThunk('posts/deletePost', async (postId, thunkAPI) => {\n  try {\n    return await postsService.deletePost(postId);\n  } catch (error) {\n    const message = error.response && error.response.data && error.resonse.data.message || error.message || error.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n});\nconst postsSlice = createSlice({\n  name: 'posts',\n  initialState,\n  reducers: {\n    reset: state => initialState\n  },\n\n  extraReducers(builder) {\n    builder.addCase(getPosts.pending, state => {\n      state.isLoading = true;\n    }).addCase(getPosts.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.isSuccess = true;\n      state.postsArray = action.payload;\n    }).addCase(getPosts.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.message = action.payload;\n    }).addCase(createPost.pending, state => {\n      state.isLoading = true;\n    }).addCase(createPost.fulfilled, state => {\n      state.isLoading = false;\n      state.isSuccess = true;\n    }).addCase(createPost.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.message = action.payload;\n    }).addCase(updatePost.pending, state => {\n      state.isLoading = true;\n    }).addCase(updatePost.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.isSuccess = true;\n      state.postsArray.map(post => post._id === action.payload._id ? action.payload : post);\n    }).addCase(updatePost.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.message = action.payload;\n    }).addCase(likePost.pending, state => {\n      state.isLoading = true;\n    }).addCase(likePost.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.isSuccess = true;\n      state.postsArray.map(post => post._id === action.payload._id ? action.payload : post);\n    }).addCase(likePost.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.message = action.payload;\n    }).addCase(deletePost.pending, state => {\n      state.isLoading = true;\n    }).addCase(deletePost.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.isSuccess = true;\n      state.postsArray.filter(post => post._id !== action.payload);\n    }).addCase(deletePost.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.message = action.payload;\n    });\n  }\n\n});\nexport const {\n  reset\n} = postsSlice.actions;\nexport default postsSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","postsService","initialState","postsArray","isError","isSuccess","isLoading","message","getPosts","_","thunkAPI","error","response","data","resonse","toString","rejectWithValue","createPost","newPost","updatePost","currentPostId","postId","postData","updatedPost","likePost","deletePost","postsSlice","name","reducers","reset","state","extraReducers","builder","addCase","pending","fulfilled","action","payload","rejected","map","post","_id","filter","actions","reducer"],"sources":["C:/Users/drpom/Desktop/Code/React/social-media/frontend/src/features/posts/postsSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\"\r\nimport postsService from \"./postsService\"\r\n\r\nconst initialState = {\r\n    postsArray: [],\r\n    isError: false,\r\n    isSuccess: false,\r\n    isLoading: false,\r\n    message: '',\r\n}\r\n\r\nexport const getPosts = createAsyncThunk('posts/getPosts', async (_, thunkAPI) => {\r\n    try {\r\n        return await postsService.getPosts()\r\n    } catch (error) {\r\n        const message = (error.response && error.response.data && error.resonse.data.message)\r\n        || error.message\r\n        || error.toString()\r\n\r\n        return thunkAPI.rejectWithValue(message)\r\n    }\r\n})\r\n\r\nexport const createPost = createAsyncThunk('posts/createPost', async (newPost, thunkAPI) => {\r\n    try {\r\n        return await postsService.createPost(newPost)\r\n    } catch (error) {\r\n        const message = (error.response && error.response.data && error.resonse.data.message)\r\n        || error.message\r\n        || error.toString()\r\n\r\n        return thunkAPI.rejectWithValue(message)\r\n    }\r\n})\r\n\r\nexport const updatePost = createAsyncThunk('posts/updatePost', async ({currentPostId: postId, postData: updatedPost}, thunkAPI) => {\r\n    try {\r\n        return await postsService.updatePost(postId, updatedPost)\r\n    } catch (error) {\r\n        const message = (error.response && error.response.data && error.resonse.data.message)\r\n        || error.message\r\n        || error.toString()\r\n\r\n        return thunkAPI.rejectWithValue(message)\r\n    }\r\n})\r\n\r\nexport const likePost = createAsyncThunk('posts/likePost', async (postId, thunkAPI) => {\r\n    try {\r\n        return await postsService.likePost(postId)\r\n    } catch (error) {\r\n        const message = (error.response && error.response.data && error.resonse.data.message)\r\n        || error.message\r\n        || error.toString()\r\n\r\n        return thunkAPI.rejectWithValue(message)\r\n    }\r\n})\r\n\r\nexport const deletePost = createAsyncThunk('posts/deletePost', async (postId, thunkAPI) => {\r\n    try {\r\n        return await postsService.deletePost(postId)\r\n    } catch (error) {\r\n        const message = (error.response && error.response.data && error.resonse.data.message)\r\n        || error.message\r\n        || error.toString()\r\n\r\n        return thunkAPI.rejectWithValue(message)\r\n    }\r\n})\r\n\r\nconst postsSlice = createSlice({\r\n    name: 'posts',\r\n    initialState,\r\n    reducers: {\r\n        reset: (state) => initialState\r\n    },\r\n    extraReducers(builder) {\r\n        builder\r\n            .addCase(getPosts.pending, (state) => {\r\n                state.isLoading = true\r\n            })\r\n            .addCase(getPosts.fulfilled, (state, action) => {\r\n                state.isLoading = false\r\n                state.isSuccess = true\r\n                state.postsArray = action.payload\r\n            })\r\n            .addCase(getPosts.rejected, (state, action) => {\r\n                state.isLoading = false\r\n                state.isError = true\r\n                state.message = action.payload\r\n            })\r\n            .addCase(createPost.pending, (state) => {\r\n                state.isLoading = true\r\n            })\r\n            .addCase(createPost.fulfilled, (state) => {\r\n                state.isLoading = false\r\n                state.isSuccess = true\r\n            })\r\n            .addCase(createPost.rejected, (state, action) => {\r\n                state.isLoading = false\r\n                state.isError = true\r\n                state.message = action.payload\r\n            })\r\n            .addCase(updatePost.pending, (state) => {\r\n                state.isLoading = true\r\n            })\r\n            .addCase(updatePost.fulfilled, (state, action) => {\r\n                state.isLoading = false\r\n                state.isSuccess = true\r\n                state.postsArray.map(post => post._id === action.payload._id ? action.payload : post)\r\n            })\r\n            .addCase(updatePost.rejected, (state, action) => {\r\n                state.isLoading = false\r\n                state.isError = true\r\n                state.message = action.payload\r\n            })\r\n            .addCase(likePost.pending, (state) => {\r\n                state.isLoading = true\r\n            })\r\n            .addCase(likePost.fulfilled, (state, action) => {\r\n                state.isLoading = false\r\n                state.isSuccess = true\r\n                state.postsArray.map(post => post._id === action.payload._id ? action.payload : post)\r\n            })\r\n            .addCase(likePost.rejected, (state, action) => {\r\n                state.isLoading = false\r\n                state.isError = true\r\n                state.message = action.payload\r\n            })\r\n            .addCase(deletePost.pending, (state) => {\r\n                state.isLoading = true\r\n            })\r\n            .addCase(deletePost.fulfilled, (state, action) => {\r\n                state.isLoading = false\r\n                state.isSuccess = true\r\n                state.postsArray.filter(post => post._id !== action.payload)\r\n            })\r\n            .addCase(deletePost.rejected, (state, action) => {\r\n                state.isLoading = false\r\n                state.isError = true\r\n                state.message = action.payload\r\n            })\r\n    }\r\n})\r\n\r\nexport const {reset} = postsSlice.actions\r\nexport default postsSlice.reducer"],"mappings":"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"},"metadata":{},"sourceType":"module"}