{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport postsService from \"./postsService\";\nconst initialState = {\n  postsArray: [],\n  isError: false,\n  isSuccess: false,\n  isLoading: false,\n  message: ''\n};\nexport const getPosts = createAsyncThunk('posts/getPosts', async (_, thunkAPI) => {\n  try {\n    return await postsService.getPosts();\n  } catch (error) {\n    const message = error.response && error.response.data && error.resonse.data.message || error.message || error.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n});\nexport const createPost = createAsyncThunk('posts/createPost', async (newPost, thunkAPI) => {\n  try {\n    return await postsService.createPost(newPost);\n  } catch (error) {\n    const message = error.response && error.response.data && error.resonse.data.message || error.message || error.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n});\nexport const updatePost = createAsyncThunk('posts/updatePost', async (_ref, thunkAPI) => {\n  let {\n    postId: postId,\n    updatedPostContent: updatedPostContent\n  } = _ref;\n\n  try {\n    return await postsService.updatePost(postId, updatedPostContent);\n  } catch (error) {\n    const message = error.response && error.response.data && error.resonse.data.message || error.message || error.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n});\nconst postsSlice = createSlice({\n  name: 'posts',\n  initialState,\n  reducers: {\n    reset: state => initialState\n  },\n\n  extraReducers(builder) {\n    builder.addCase(getPosts.pending, state => {\n      state.isLoading = true;\n    }).addCase(getPosts.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.isSuccess = true;\n      state.postsArray = action.payload;\n    }).addCase(getPosts.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.message = action.payload;\n    }).addCase(createPost.pending, state => {\n      state.isLoading = true;\n    }).addCase(createPost.fulfilled, state => {\n      state.isLoading = false;\n      state.isSuccess = true;\n    }).addCase(createPost.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.message = action.payload;\n    }).addCase(updatePost.pending, state => {\n      state.isLoading = true;\n    }).addCase(updatePost.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.isSuccess = true;\n      state.postsArray.map(post => post.id === action.payload.id ? action.payload : post);\n    }).addCase(updatePost.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.message = action.payload;\n    });\n  }\n\n});\nexport const {\n  reset\n} = postsSlice.actions;\nexport default postsSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","postsService","initialState","postsArray","isError","isSuccess","isLoading","message","getPosts","_","thunkAPI","error","response","data","resonse","toString","rejectWithValue","createPost","newPost","updatePost","postId","updatedPostContent","postsSlice","name","reducers","reset","state","extraReducers","builder","addCase","pending","fulfilled","action","payload","rejected","map","post","id","actions","reducer"],"sources":["C:/Users/drpom/Desktop/Code/React/social-media/frontend/src/features/posts/postsSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\"\r\nimport postsService from \"./postsService\"\r\n\r\nconst initialState = {\r\n    postsArray: [],\r\n    isError: false,\r\n    isSuccess: false,\r\n    isLoading: false,\r\n    message: ''\r\n}\r\n\r\nexport const getPosts = createAsyncThunk('posts/getPosts', async (_, thunkAPI) => {\r\n    try {\r\n        return await postsService.getPosts()\r\n    } catch (error) {\r\n        const message = (error.response && error.response.data && error.resonse.data.message)\r\n        || error.message\r\n        || error.toString()\r\n\r\n        return thunkAPI.rejectWithValue(message)\r\n    }\r\n})\r\n\r\nexport const createPost = createAsyncThunk('posts/createPost', async (newPost, thunkAPI) => {\r\n    try {\r\n        return await postsService.createPost(newPost)\r\n    } catch (error) {\r\n        const message = (error.response && error.response.data && error.resonse.data.message)\r\n        || error.message\r\n        || error.toString()\r\n\r\n        return thunkAPI.rejectWithValue(message)\r\n    }\r\n})\r\n\r\nexport const updatePost = createAsyncThunk('posts/updatePost', async ({postId: postId, updatedPostContent: updatedPostContent}, thunkAPI) => {\r\n    try {\r\n        return await postsService.updatePost(postId, updatedPostContent)\r\n    } catch (error) {\r\n        const message = (error.response && error.response.data && error.resonse.data.message)\r\n        || error.message\r\n        || error.toString()\r\n\r\n        return thunkAPI.rejectWithValue(message)\r\n    }\r\n})\r\n\r\nconst postsSlice = createSlice({\r\n    name: 'posts',\r\n    initialState,\r\n    reducers: {\r\n        reset: (state) => initialState\r\n    },\r\n    extraReducers(builder) {\r\n        builder\r\n            .addCase(getPosts.pending, (state) => {\r\n                state.isLoading = true\r\n            })\r\n            .addCase(getPosts.fulfilled, (state, action) => {\r\n                state.isLoading = false\r\n                state.isSuccess = true\r\n                state.postsArray = action.payload\r\n            })\r\n            .addCase(getPosts.rejected, (state, action) => {\r\n                state.isLoading = false\r\n                state.isError = true\r\n                state.message = action.payload\r\n            })\r\n            .addCase(createPost.pending, (state) => {\r\n                state.isLoading = true\r\n            })\r\n            .addCase(createPost.fulfilled, (state) => {\r\n                state.isLoading = false\r\n                state.isSuccess = true\r\n            })\r\n            .addCase(createPost.rejected, (state, action) => {\r\n                state.isLoading = false\r\n                state.isError = true\r\n                state.message = action.payload\r\n            })\r\n            .addCase(updatePost.pending, (state) => {\r\n                state.isLoading = true\r\n            })\r\n            .addCase(updatePost.fulfilled, (state, action) => {\r\n                state.isLoading = false\r\n                state.isSuccess = true\r\n                state.postsArray.map(post => post.id === action.payload.id ? action.payload : post)\r\n            })\r\n            .addCase(updatePost.rejected, (state, action) => {\r\n                state.isLoading = false\r\n                state.isError = true\r\n                state.message = action.payload\r\n            })\r\n    }\r\n})\r\n\r\nexport const {reset} = postsSlice.actions\r\nexport default postsSlice.reducer"],"mappings":"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"},"metadata":{},"sourceType":"module"}